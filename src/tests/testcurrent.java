package tests;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.junit.Test;

import dbaware.DbConnector;
import service.TwitStripper;
import twitter4j.Status;

public class testcurrent {

	private class TestThread extends Thread {
		private int index;

		public TestThread(int j) {
			index = j;
		}

		@Override
		public void run() {
			try {
				Thread.sleep(10000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println("" + index + " finished");
		}
	}

	/* Save foto to file
	*/
	@Test
	public void testSaveJPG() {
		DbConnector dbConnector = DbConnector.getInstance();
		int pic_id = 1749;
		byte[] picture = dbConnector.getPictureByID(pic_id);
		String pfName = "D:/Temp/1.jpg";

		SavePicture(picture, pfName);
	}

	private void SavePicture(byte[] picture, String filename) {
		FileOutputStream fos = null;
		// write binary stream into file
		File file = new File(filename);
		try {
			fos = new FileOutputStream(file);
			fos.write(picture);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	//@Test
	public void testshuffle() {
		String pname = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤";
		String ppage = "10 –ª–µ—Ç";
		String twcontent = String.format("%s %s.%n", pname, ppage);
		List<String> helps = Arrays.asList("–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ.", "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å.", "–ü–æ–º–æ–≥–∏—Ç–µ!", "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!", "Help!");
		String randomHelp = helps.get(new Random().nextInt(helps.size())); 
		String tags = "#–î–æ–±—Ä–æ—Ç–∞–ü–æ–¥–∞—Ä–∏—Ç–ñ–∏–∑–Ω—å #–°–æ—Ç–≤–æ—Ä–∏–ë–ª–∞–≥–æ";

		int id = 2367;
		String link = "http://helpchildren.online/?id=" + id;
		
		List<String> twits = Arrays.asList("random1", "random2", "random3", "random4");
		String randomTwit = twits.get(new Random().nextInt(twits.size())); 
		
		List<String> details = Arrays.asList(twcontent, randomHelp, link, tags, String.format("%n%s%n", randomTwit));
		
		Collections.shuffle(details);
		//for (String stat : details) System.out.println(stat);
		String listString = String.join(" ", details);	
		System.out.println(listString);

	}

	//@Test
	public void testStripTwits() {
		List<String> statuses = Arrays.asList(
			"@YuraKas1 –ß–∏—Å–ª–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø—Ä–∏ –æ–±—Ä—É—à–µ–Ω–∏–∏ —Å—Ç–µ–Ω—ã –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞ #ff –≤ –ë–∞–ª–∞—à–∏—Ö–µ –≤–æ–∑—Ä–æ—Å–ª–æ –¥–æ 10 https://t.co/nOeX5Yhkm9 https://t.co/fiQhYR5ory qq @YuraKas1",
			"–ü–µ—Ä–µ–∂–∏—Ç–æ–µ –ú–µ–∫—Å–∏–∫–æ–π –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ –æ–±—ä—è–≤–∏–ª–∏ –º–æ—â–Ω–µ–π—à–∏–º –∑–∞ 100 –ª–µ—Ç https://t.co/LbbLjJlH7K https://t.co/WdFhjArIXb",
			"–ì–æ—Ç–æ–≤—å—Ç–µ –≤–∞—à–∏ –∫—É–ø–∞–ª—å–Ω–∏–∫–∏. –ù–∞ –ú–æ—Å–∫–≤—É –Ω–∞–¥–≤–∏–≥–∞–µ—Ç—Å—è –∞–Ω–æ–º–∞–ª—å–Ω–∞—è 30-–≥—Ä–∞–¥—É—Å–Ω–∞—è —Å–µ–Ω—Ç—è–±—Ä—å—Å–∫–∞—è –∂–∞—Ä–∞! –£–∂–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–∞—á–Ω–µ—Ç —Å—Ç‚Ä¶ https://t.co/4aqQj9x2a7",
			"–í –ë–∞–ª–∞—à–∏—Ö–µ —Å—Ç–µ–Ω–∞ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞ –æ–±—Ä—É—à–∏–ª–∞—Å—å –Ω–∞ –ª—é–¥–µ–π: –µ—Å—Ç—å —Ä–∞–Ω–µ–Ω—ã–µ https://t.co/XZnkG3OcBW https://t.co/6j5eeIDmzN",
			"–í –ì–æ—Å–¥—É–º–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏–µ –ì–æ—Å–¥–µ–ø–∞ –æ –ø–æ–ª–∏—Ç–∏–∫–µ ¬´–æ–∫–æ –∑–∞ –æ–∫–æ¬ª https://t.co/14xCUOXHyp",
			"‚òÄÔ∏èüí•üò±–ï—â–µ –æ–¥–∏–Ω –≤–∑—Ä—ã–≤ –Ω–∞ –°–æ–ª–Ω—Ü–µ ‚Äî –∏ —Ç–æ–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ—â–Ω—ã–π! –ù–∞ –ó–µ–º–ª–µ —É–∂–µ –±—É—à—É–µ—Ç –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è –≤ 10 —Ä–∞–∑ —Å–∏–ª—å–Ω–µ–µ, —á–µ–º‚Ä¶ https://t.co/eCDMXbxMFH",
			"–ë—Ä–∏—Ñ–∏–Ω–≥ –ú–∞—Ä–∏–∏ –ó–∞—Ö–∞—Ä–æ–≤–æ–π: –ø—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è https://t.co/ZH6kfkiHNn #–≤–∏–¥–µ–æ",
			"¬´–°—Ç—Ä–∞–Ω–Ω–æ, —á—Ç–æ –æ–Ω–∏ —Ç–∞–∫ –¥–æ–ª–≥–æ —Ä–∞—Å–∫–∞—á–∏–≤–∞–ª–∏—Å—å¬ª: –†–æ–≥–æ–∑–∏–Ω –æ—Ç–º–µ—Ç–∏–ª –∑–∞–ø–æ–∑–¥–∞–ª–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞ –°–∏—Ä–∏–∏ –∏ –ò–∑—Ä–∞–∏–ª—è –∫ ¬´–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞–º¬ª:‚Ä¶ https://t.co/MLCHVGpELq",
			"–°—ã–Ω –¢—Ä–∞–º–ø–∞ –æ–±—ä—è—Å–Ω–∏–ª—Å—è –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü–∫–æ–º–∏—Å—Å–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–ª–µ–¥—É–µ—Ç –¥–µ–ª–æ –æ ¬´—Ä—É–∫–µ –†–æ—Å—Å–∏–∏¬ª –Ω–∞ –≤—ã–±–æ—Ä–∞—Ö –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –°–®–ê https://t.co/hx9O7B3qHy #–≤–∏–¥–µ–æ",
			"–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ –≤–æ–ª–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–¢—ã —Å—É–ø–µ—Ä! –¢–∞–Ω—Ü—ã¬ª https://t.co/zvyYepMGGp",
			"–°–∏–ª—å–Ω–µ–π—à–µ–µ –∑–∞ 30 –ª–µ—Ç –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É –±–µ—Ä–µ–≥–æ–≤ –ú–µ–∫—Å–∏–∫–∏. –ö–∞—á–∞–ª–æ –¥–∞–∂–µ —Ñ–æ–Ω–∞—Ä–∏ –∏ –ø–∞–º—è—Ç–Ω–∏–∫–∏. –ë–æ–ª—å—à–µ #–≤–∏–¥–µ–æ:‚Ä¶ https://t.co/rQuFfyrdff",
			"@YuraKas1 —Å–ª–∏—à–∫–æ–º —Ç–æ–Ω–∫–æ, –¥–∞? –û–∫, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º—ã –≤–∞—Å –Ω–µ —Ä–∞–∑–æ—á–∞—Ä—É–µ–º! :-)",
			"–ü—É—Ç–∏–Ω –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ —á–µ—Ç—ã—Ä–µ—Ö —Å—É–¥–æ–≤ –Ω–∞ –∑–∞–≤–æ–¥–µ ¬´–ó–≤–µ–∑–¥–∞¬ª –≤ –ü—Ä–∏–º–æ—Ä—å–µ https://t.co/l3UWtaAxZz #–≤–∏–¥–µ–æ",
			"–°–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—á–∞–µ—Ç—å—Å—è –í—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏. #–º—ã—Ç–∞–∫–≤–∏–¥–∏–º https://t.co/H4Fsr1njOU",
			"–ú–∏–Ω–æ–±–æ—Ä–æ–Ω—ã: #–í–ö–° –†–§ —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ ¬´–º–∏–Ω–∏—Å—Ç—Ä–∞ –≤–æ–π–Ω—ã¬ª #–ò–ì–ò–õ https://t.co/nfeIvK7y0F https://t.co/h8MAKm2M9j",
			"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –Ω–∞–ª–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º https://t.co/BilesUv3qu",
			"–ü—É—Ç–∏–Ω –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ —á–µ—Ç—ã—Ä–µ—Ö —Å—É–¥–æ–≤ https://t.co/TfYAbIs9U8 https://t.co/i5nJPj9fXK",
			"–í –∞—ç—Ä–æ–ø–æ—Ä—Ç—É —à—Ç–∞—Ç–∞ –§–ª–æ—Ä–∏–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å—Ç—Ä–µ–ª—å–±–∞ https://t.co/l12pxYi56r",
			"–ì–æ—Å–¥–µ–ø –æ—Ç—Ä–∏—Ü–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ #–§–ë–† –≤ –æ–±—ã—Å–∫–∞—Ö –¥–∏–ø—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –†–§ –∏ –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ—Ç–≤–µ—Ç–Ω—ã—Ö –º–µ—Ä‚Ä¶ https://t.co/4rxbhZsVBZ",
			"–í–æ –§–ª–æ—Ä–∏–¥–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —É—Ä–∞–≥–∞–Ω–∞ ¬´–ò—Ä–º–∞¬ª –æ–ø–æ–≤–µ—â–∞—é—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ https://t.co/zIMBkcweXC"
			);
		
		TwitStripper x = new TwitStripper(statuses, true);
		List<String> y = x.GetStrippedList();
		for (String content : y) {
			System.out.println(content);		
		}
	}
	
	//@Test
	public void testRandom() {
		
		Random random = new Random();
		for (int i = 0; i < 9; i++) {
			double tickscnt = random.nextGaussian();
			System.out.printf("Value: %s \n", String.valueOf(tickscnt));
		}
	}
	
/*	public static void main2(String[] args) {
		testcurrent x = new testcurrent();
		
		//ExecutorService cachedPool = Executors.newCachedThreadPool();
		ExecutorService service = Executors.newFixedThreadPool(10);
		for (int j = 0; j < 20; j++) {
			service.submit(x.new TestThread(j));
		}
		service.shutdown(); 
	}
	*/

}
